import numpy as np
import cv2

py -m pip install numpy 

from keras.preprocessing.image import ImageDataGenerator

# Define directories for training and validation sets
train_dir = '/Users/ismailivedi/Desktop/Training_Images'
valid_dir = '/Users/ismailivedi/Desktop/Training_Images'

# Define image data generators
datagen = ImageDataGenerator(rescale=1./255)

train_generator = datagen.flow_from_directory(
        train_dir,
        target_size=(200, 200),
        batch_size=32,
        class_mode='binary')

validation_generator = datagen.flow_from_directory(
        valid_dir,
        target_size=(200, 200),
        batch_size=32,
        class_mode='binary')
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define the model architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# create an image data generator with augmentations
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    fill_mode='nearest'
)

# flow training images from directory
train_generator = train_datagen.flow_from_directory(
        '/Users/ismailivedi/Desktop/Training_Images',
    target_size=(200, 200),
    batch_size=16,
    class_mode='binary'
)


# fit the model with the augmented data
model.fit(train_generator, epochs=10)

val_datagen = ImageDataGenerator(rescale=1./255)

val_generator = val_datagen.flow_from_directory(
        '/Users/ismailivedi/Desktop/Training_Images',
        target_size=(200, 200),
        batch_size=20,
        class_mode='binary')


history = model.fit_generator(train_generator, epochs=10, validation_data=val_generator)
print(history.history['accuracy'])
print(history.history['val_accuracy'])

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['accuracy'], label='training accuracy')
plt.title('Training Loss and Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.legend()
plt.show()

# Define test data generator
test_datagen = ImageDataGenerator(rescale=1./255)

# Create test data generator
test_generator = test_datagen.flow_from_directory(
    '/Users/ismailivedi/Desktop/Training_Images',
    target_size=(200, 200),
    batch_size=16,
    class_mode='binary')

# Evaluate the model on the test data
scores = model.evaluate(test_generator, steps=len(test_generator))

print("Test accuracy:", scores[1])

from keras.models import load_model
from PIL import Image
import numpy as np

# Load the trained model
model = load_model('/Users/ismailivedi/Desktop/ipynb_checkpoints/my_model.h5')

# Load the image
img = Image.open('/Users/ismailivedi/Desktop/defected_3.jpg')

# Preprocess the image
img = img.resize((200, 200)) # Resize the image to the same size used during training
img_array = np.array(img) # Convert the image to a numpy array
img_array = img_array / 255.0 # Normalize the pixel values

# Make a prediction
result = model.predict(np.array([img_array]))

if result[0][0] > 0.5:
    print("Non-Defective")
else:
    print("Defective")
